package ${package.Entity};
<% for(pkg in table.importPackages){ %>
import ${pkg};
<% } %>
<% if(swagger2){ %>
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
<% } %>
<% if(entityLombokModel){ %>
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.experimental.Accessors;
<% } %>
/**
 * <p>
 * ${table.comment!}
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */
<% if(entityLombokModel){ %>
@Data
<% } %>
<% if(table.convert){ %>
@TableName("${table.name}")
<% } %>
<% if(swagger2){ %>
@ApiModel(value="${entity}对象", description="${table.comment!''}")
<% } %>
<% if(isNotEmpty(superEntityClass)){ %>
public class ${entity} extends ${superEntityClass}<% if(activeRecord){ %><${entity}><%}%>{
<% }else if(activeRecord){ %>
public class ${entity} extends Model<${entity}> {
<% }else{ %>
public class ${entity} implements Serializable {
<% } %>

<% if(entitySerialVersionUID){ %>
    private static final long serialVersionUID = 1L;
<% } %>


<% /** -----------BEGIN 构造mybatis里常用的sql,写在一个注释里 by：Chuck----------- **/ %>
/**
自动生成${table.name}表相关的，mybatis里的insert语句:

  void insert(${entity} params);

  <insert id="insert" parameterType="${package.Entity}.${entity}">
    INSERT INTO
      ${table.name}(
        <% for(field in table.fields){ %>
         ${field.name}<%var commaPlaceHolder =fieldLP.last?'':',';%>${commaPlaceHolder}
        <% } %>
      )
      VALUES
      (
     <% for(field in table.fields){ %>
           <%
            var type =field.propertyType;
            var jdbcType ='';
             if(type =="String" ){
                jdbcType =',jdbcType=VARCHAR';
             }
             if(type=="Integer"){
                jdbcType =',jdbcType=INTEGER';
             }
             if(type=='long'){
                jdbcType =',jdbcType=BIGINT';
             }
             if(type=='Long'){
                jdbcType =',jdbcType=BIGINT';
             }
             if(type=='Date'){
                jdbcType =',jdbcType=TIMESTAMP';
             }
             if(type=='LocalDate'){
                jdbcType =',jdbcType=TIMESTAMP';
             }
             %>
          #{${field.propertyName}${jdbcType}}<%var commaPlaceHolder =fieldLP.last?'':',';%>${commaPlaceHolder}
     <% } %>
      )
    </insert>

**/

/**
自动生成${table.name}表相关的，mybatis里的批量insert语句:

   void insertList( @Param("list" )ArrayList<${entity}> params);

   <insert id="insertList" parameterType="java.util.List">
    INSERT INTO
      ${table.name}(
        <% for(field in table.fields){ %>
         ${field.name}<%var commaPlaceHolder =fieldLP.last?'':',';%>${commaPlaceHolder}
        <% } %>
      )
    VALUES
      <foreach collection="list" item="item" separator=",">
      (
     <% for(field in table.fields){ %>
     <%  var typeClassName = type.name(field.propertyType); %>
           <%
            var type =field.propertyType;
            var jdbcType ='';
             if(type =="String" ){
                jdbcType =',jdbcType=VARCHAR';
             }
             if(type=="Integer"){
                jdbcType =',jdbcType=INTEGER';
             }
             if(type=='long'){
                jdbcType =',jdbcType=BIGINT';
             }
             if(type=='Long'){
                jdbcType =',jdbcType=BIGINT';
             }
             if(type=='Date'){
                jdbcType =',jdbcType=TIMESTAMP';
             }
             if(type=='LocalDate'){
                jdbcType =',jdbcType=TIMESTAMP';
             }
             %>
          #{item.${field.propertyName}${jdbcType}}<%var commaPlaceHolder =fieldLP.last?'':',';%>${commaPlaceHolder}
     <% } %>
      )
      </foreach>
    </insert>

**/

/**
自动生成${table.name}表相关的，mybatis里的update语句:

  void update(${entity} params);

  <update id="update" parameterType=""${package.Entity}.${entity}"">
    UPDATE
        ${table.name}
    SET
    <% for(field in table.fields){ %>
       <%
        var type =field.propertyType;
        var jdbcType ='';
         if(type =="String" ){
            jdbcType =',jdbcType=VARCHAR';
         }
         if(type=="Integer"){
            jdbcType =',jdbcType=INTEGER';
         }
         if(type=='long'){
            jdbcType =',jdbcType=BIGINT';
         }
         if(type=='Long'){
            jdbcType =',jdbcType=BIGINT';
         }
         if(type=='Date'){
            jdbcType =',jdbcType=TIMESTAMP';
         }
         if(type=='LocalDate'){
            jdbcType =',jdbcType=TIMESTAMP';
         }
         %>
        <if test="${field.propertyName} != null">
          ${field.name} = #{${field.propertyName}${jdbcType}}<%var commaPlaceHolder =fieldLP.last?'':',';%>${commaPlaceHolder}
        </if>
    <% } %>
    WHERE
    1==1
   </update>
**/

/**
自动生成${table.name}表相关的，mybatis里的查询语句:

  List<${entity}> queryList();

  <select id="queryList" resultType=""${package.Entity}.${entity}"">
    SELECT
        <% for(field in table.fields){ %>
      ${field.name}  ${field.propertyName}<%var commaPlaceHolder =fieldLP.last?'':',';%>${commaPlaceHolder}
        <% } %>
    FROM
      ${table.name}
    WHERE
      1==1
   </select>

**/
<% /** -----------END 构造mybatis里常用的sql,写在一个注释里 by：Chuck----------- **/ %>



<% /** -----------BEGIN 字段循环遍历,写入数据库原始字段作为常量 by：Chuck----------- **/ %>


    /*****
        * 数据库原始字段
    *******/
<% for(field in table.fields){ %>
<%
var a = field.name;
var result = strutil.toUpperCase (a);
%>
    public static final String ${result}="${field.name}";
<% } %>
<% /** -----------END 字段循环遍历,写入数据库原始字段作为常量 by：Chuck----------- **/ %>

<% /** -----------BEGIN 字段循环遍历----------- **/ %>
<% for(field in table.fields){ %>
    <%
    if(field.keyFlag){
        var keyPropertyName = field.propertyName;
    }
    %>

    <% if(isNotEmpty(field.comment)){ %>
        <% if(swagger2){ %>
    @ApiModelProperty( value = "${field.comment}" , required = true)
        <% }else{ %>
    /**
     * ${field.comment}
     */
        <% } %>
    <% } %>
    <% if(field.keyFlag){ %>
    <%
    /*主键*/
    %>
        <% if(field.keyIdentityFlag) { %>
    @TableId(value = "${field.name}", type = IdType.AUTO)
        <% }else if(isNotEmpty(idType)){ %>
    @TableId(value = "${field.name}", type = IdType.${idType})
        <% }else if(field.convert){ %>
    @TableId("${field.name}")
         <% } %>
    <%
    /*普通字段*/
    %>
    <% } %>
    <%
    /*乐观锁注解*/
    %>
    <% if(versionFieldName!'' == field.name){ %>
    @Version
    <% } %>
    <%
    /*逻辑删除注解*/
    %>
    <% if(logicDeleteFieldName!'' == field.name){ %>
    @TableLogic
    <% } %>
    private ${field.propertyType} ${field.propertyName};
<% } %>
<% /** -----------END 字段循环遍历----------- **/ %>

<% if(!entityLombokModel){ %>
    <% for(field in table.fields){ %>
        <%
        var getprefix ='';
        if(field.propertyType=='boolean'){
            getprefix='is';
        }else{
            getprefix='get';
        }
        %>
    public ${field.propertyType} ${getprefix}${field.capitalName}() {
        return ${field.propertyName};
    }

        <% if(entityBuilderModel){ %>
    public ${entity} set${field.capitalName}(${field.propertyType} ${field.propertyName}) {
        <% }else{ %>
    public void set${field.capitalName}(${field.propertyType} ${field.propertyName}) {
        <% } %>
        this.${field.propertyName} = ${field.propertyName};
        <% if(entityBuilderModel){ %>
        return this;
        <% } %>
    }

    <% } %>
<% } %>
<% if(entityColumnConstant){ %>
   <% for(field in table.fields){ %>
    public static final String ${strutil.toUpperCase(field.name)} = "${field.name}";

   <% } %>
<% } %>
<% if(activeRecord){ %>
    @Override
    protected Serializable pkVal() {
    <% if(isNotEmpty(keyPropertyName)){ %>
        return this.${keyPropertyName};
    <% }else{ %>
        return null;
    <% } %>
    }

<% } %>
<% if(!entityLombokModel){ %>
    @Override
    public String toString() {
        return "${entity}{" +
    <% for(field in table.fields){ %>
       <% if(fieldLP.index==0){ %>
        "${field.propertyName}=" + ${field.propertyName} +
       <% }else{ %>
        ", ${field.propertyName}=" + ${field.propertyName} +
       <% } %>
    <% } %>
        "}";
    }
<% } %>
}
